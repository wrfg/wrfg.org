{"version":3,"sources":["webpack:///./src/templates/programs/single.js","webpack:///./src/components/show.js"],"names":["data","page","markdownRemark","program","Program","factory","title","shows","length","map","show","to","slug","key","splits","airshifts","query","Range","start","end","value","Shift","day","ShowImageSquare","bannerImageUrl","css","lightGrey","ShiftSummary","first","reduce","accumulation","item","days","airshift","sort","ordinal","0","1","2","3","4","5","6","range","index","Fragment"],"mappings":"4FAAA,mIASe,YAAGA,WAChB,MAAMC,EAAOD,EAAKE,eACZC,EAAUC,IAAQC,QAAQJ,GAEhC,OACE,YAAC,IAAD,CAAQK,MAAOH,EAAQG,OACrB,YAAC,IAAD,KACE,sBAAKH,EAAQG,OACb,YAAC,IAAD,KACE,+BACCH,EAAQI,MAAMC,OACbL,EAAQI,MAAME,IAAKC,GACjB,YAAC,IAAD,CAAMC,GAAID,EAAKE,MACb,YAAC,IAAD,CAAQC,IAAKH,EAAKE,KAAME,OAAQ,CAAC,EAAG,IAClC,YAAC,IAAD,CAAiBJ,KAAMA,IACvB,YAAC,IAAD,KACE,sBAAKA,EAAKJ,OACV,YAAC,IAAD,CAAcS,UAAWL,EAAKK,gBAMtC,qCAQL,MAAMC,EAAK,c,kCCxClB,iIASO,MAAMC,EAAQ,EAAGC,QAAOC,SACtB,wBAAM,YAAC,IAAD,CAAMC,MAAOF,IAAU,MAAM,YAAC,IAAD,CAAME,MAAOD,KAG5CE,EAAQ,EAAGD,WACf,wBAAOA,EAAME,IAAb,KAAmB,YAACL,EAAD,CAAOC,MAAOE,EAAMF,MAAOC,IAAKC,EAAMD,O,kTAG3D,MAAMI,EAAkB,EAAGb,WAChC,MAAM,eAAEc,GAAmBd,EAE3B,OAAO,mBACLe,IAAKA,YAAF,oCAEmBC,IAFnB,sCAQDF,EACE,mBACAC,IAAKA,YAAF,wDAGwBD,EAHxB,6FAUH,mBACAC,IAAG,GAMD,mBAAKA,IAAG,OAkBLE,EAAe,EAAGZ,gBAC7B,GAAyB,IAArBA,EAAUP,OACZ,OAAO,YAACa,EAAD,CAAOD,MAAOL,EAAU,KAGjC,MAAMa,EAAQb,EAAU,GAIxB,GAHiBA,EAAUc,OAAO,CAACC,EAAcC,IACxCD,GAAgBC,EAAKb,QAAUU,EAAMV,OAASa,EAAKZ,MAAQS,EAAMT,KACvE,GACW,CACZ,MAAMa,EAAOjB,EAAUN,IAAKwB,GAAaA,EAASX,KAAKb,IAAKa,IACnD,CACL,OAAU,EACV,OAAU,EACV,QAAW,EACX,UAAa,EACb,SAAY,EACZ,OAAU,EACV,SAAY,IACZA,IACDY,OAAOzB,IAAK0B,IACN,CACLC,EAAG,SACHC,EAAG,SACHC,EAAG,UACHC,EAAG,YACHC,EAAG,WACHC,EAAG,SACHC,EAAG,aACHP,IAEJ,IAAIQ,EAAS,GAAEX,EAAK,QAAQA,EAAKA,EAAKxB,OAAS,KAI/C,MAHc,oBAAVmC,IACFA,EAAQ,YAEH,wBAAOA,EAAP,IAAc,YAAC1B,EAAD,CAAOC,MAAOU,EAAMV,MAAOC,IAAKS,EAAMT,OAG7D,OACE,wBACGJ,EAAUN,IAAI,CAACwB,EAAUW,IAEtB,YAAC,IAAMC,SAAP,CAAgBhC,IAAK+B,GAClBA,EAAQ,GAAK,KACd,YAACvB,EAAD,CAAOD,MAAOa","file":"component---src-templates-programs-single-js-db9c3bdc7f796f4d8afd.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"@/components/layout\"\nimport { Stack, Spread, VerticallyCenter } from '@/components/parts'\nimport { ShiftSummary, ShowImageSquare } from '@/components/show'\n\nimport Program from \"@/models/program\"\n\nexport default ({ data }) => {\n  const page = data.markdownRemark\n  const program = Program.factory(page)\n\n  return (\n    <Layout title={program.title}>\n      <Stack>\n        <h1>{program.title}</h1>\n        <Stack>\n          <h4>Shows</h4>\n          {program.shows.length ? (\n            program.shows.map((show) => (\n              <Link to={show.slug}>\n                <Spread key={show.slug} splits={[1, 4]}>\n                  <ShowImageSquare show={show} />\n                  <VerticallyCenter>\n                    <h3>{show.title}</h3>\n                    <ShiftSummary airshifts={show.airshifts} />\n                  </VerticallyCenter>\n                </Spread>\n              </Link>\n            ))\n          ) : (\n            <p>No shows</p>\n          )}\n        </Stack>\n      </Stack>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      frontmatter {\n        title\n      }\n      shows {\n        id\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          banner_image\n          airshifts {\n            day\n            start\n            duration\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\n\nimport { css } from '@emotion/core'\n\nimport { lightGrey } from '@/components/colors'\n\nimport Time from '@/components/time'\n\n\nexport const Range = ({ start, end }) => {\n  return <span><Time value={start} />{' - '}<Time value={end} /></span>\n}\n\nexport const Shift = ({ value }) => {\n  return <span>{value.day}s <Range start={value.start} end={value.end} /></span>\n}\n\nexport const ShowImageSquare = ({ show }) => {\n  const { bannerImageUrl } = show\n\n  return <div\n    css={css`\n      overflow: hidden;\n      border: 1px solid ${lightGrey};\n      border-radius: 0.25em;\n      width: 100%;\n    `}\n  >\n    {\n      bannerImageUrl ? (\n        <div\n        css={css`\n          padding-bottom: 100%;\n          width: 100%;\n          background-image: url(\"${bannerImageUrl}\");\n          background-repeat: no-repeat;\n          background-position: center center;\n          background-size: cover;\n        `}\n        />\n      ) : (\n        <div\n        css={css`\n          padding-bottom: 100%;\n          width: 100%;\n          position: relative;\n        `}\n        >\n          <div css={css`\n            position: absolute;\n            width: 120%;\n            height: 120%;\n            top: -10%;\n            left: -10%;\n            background-image: url(\"/images/logo-disk.png\");\n            background-size: 40%;\n            transform: rotate(15deg);\n            background-position: center center;\n            opacity: 0.5;\n          `}/>\n        </div>\n      )\n    }\n  </div>\n}\n\nexport const ShiftSummary = ({ airshifts }) => {\n  if (airshifts.length === 1) {\n    return <Shift value={airshifts[0]} />\n  }\n\n  const first = airshifts[0]\n  const sameTime = airshifts.reduce((accumulation, item) => {\n    return accumulation && item.start === first.start && item.end === first.end\n  }, true)\n  if (sameTime) {\n    const days = airshifts.map((airshift) => airshift.day).map((day) => {\n      return {\n        'Sunday': 0,\n        'Monday': 1,\n        'Tuesday': 2,\n        'Wednesday': 3,\n        'Thursday': 4,\n        'Friday': 5,\n        'Saturday': 6,\n      }[day]\n    }).sort().map((ordinal) => {\n      return {\n        0: 'Sunday',\n        1: 'Monday',\n        2: 'Tuesday',\n        3: 'Wednesday',\n        4: 'Thursday',\n        5: 'Friday',\n        6: 'Saturday',\n      }[ordinal]\n    })\n    let range = `${days[0]} - ${days[days.length - 1]}`\n    if (range === 'Monday - Friday') {\n      range = 'Weekdays'\n    }\n    return <span>{range} <Range start={first.start} end={first.end} /></span>\n  }\n\n  return (\n    <span>\n      {airshifts.map((airshift, index) => {\n        return (\n          <React.Fragment key={index}>\n            {index > 0 && ', '}\n            <Shift value={airshift} />\n          </React.Fragment>\n        )\n      })}\n    </span>\n  )\n}\n"],"sourceRoot":""}