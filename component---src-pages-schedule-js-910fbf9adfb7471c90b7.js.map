{"version":3,"sources":["webpack:///./src/pages/schedule.js","webpack:///./src/components/show.js"],"names":["Currently","current","next","gap","splits","show","to","slug","title","Day","day","airshifts","map","airshift","key","id","value","start","end","Everything","dayKeys","days","style","fontSize","index","column","row","label","times","time","minute","indexOf","toLowerCase","hour","rowSpan","duration","toHours","backgroundColor","lightGrey","DailySchedule","shows","now","useNow","allAirshifts","reduce","accumulation","item","concat","setDay","useState","dayOfWeek","name","filter","sort","x","y","sortByStart","onChange","options","data","allMarkdownRemark","edges","edge","node","Show","factory","zeitgeist","query","Range","Shift","ShowImageSquare","bannerImageUrl","css","ShiftSummary","length","first","ordinal","0","1","2","3","4","5","6","range","Fragment"],"mappings":"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","file":"component---src-pages-schedule-js-910fbf9adfb7471c90b7.js","sourcesContent":["import React, { useState } from \"react\"\n\nimport { Link, graphql } from \"gatsby\"\n\nimport { useNow, days, times } from '@/now'\nimport Layout from \"@/components/layout.js\"\nimport Time from \"@/components/time.js\"\nimport { lightGrey } from '@/components/colors'\n\nimport { Dropdown } from '@/components/forms'\n\nimport { Stack, Spread, VerticallyCenter, Cell, Grid } from '@/components/parts'\n\nimport { ShowImageSquare } from '@/components/show'\n\nimport Show, { sortByStart, zeitgeist } from \"@/models/show.js\"\n\nconst Currently = ({ current, next }) => {\n  return (\n    <Spread gap={2} splits={[1, 4]}>\n      <div>\n        <ShowImageSquare show={current.show} />\n      </div>\n      <VerticallyCenter>\n        <h3><Link to={current.show.slug}>{current.show.title}</Link> is on air.</h3>\n        {next && (\n          <div>Up next is <Link to={next.show.slug}>{next.show.title}</Link>.</div>\n        )}\n      </VerticallyCenter>\n    </Spread>\n  )\n}\n\nconst Day = ({ day, airshifts }) => {\n  return (\n    <Stack gap={1}>\n      {airshifts.map(([show, airshift]) => {\n        return (\n          <div key={show.id}>\n            <Time value={airshift.start} />&nbsp;-&nbsp;<Time value={airshift.end} />{' '}<Link to={show.slug}>{show.title}</Link>\n          </div>\n        )\n      })}\n    </Stack>\n  )\n}\n\nconst Everything = ({ airshifts }) => {\n  const dayKeys = days.map((day) => day.value)\n\n  return (\n    <div style={{ fontSize: '0.666em' }}>\n      <Grid>\n        {days.map((day, index) => (\n          <Cell column={index + 2} row={1}>{day.label}</Cell>\n        ))}\n        {times.map((time, index) => (\n          <Cell column={1} row={index + 2}>{time.minute() === 0 ? <Time value={time} /> : ' '}</Cell>\n        ))}\n        {airshifts.map(([show, airshift], index) => {\n          return (\n            <Cell\n              key={index}\n              column={dayKeys.indexOf(airshift.day.toLowerCase()) + 2}\n              row={(airshift.start.hour() * 2 + airshift.start.minute() / 30) + 2}\n              rowSpan={airshift.duration.toHours() * 2}\n              style={{ backgroundColor: lightGrey }}\n            >\n              <Link to={show.slug}>{show.title}</Link>\n            </Cell>\n          )\n        })}\n      </Grid>\n    </div>\n  )\n}\n\nconst DailySchedule = ({ shows }) => {\n  const now = useNow()\n  const allAirshifts = shows.map((show) => {\n    return show.airshifts.map((airshift) => [show, airshift])\n  }).reduce((accumulation, item) => accumulation.concat(item), [])\n\n  const [ day, setDay ] = useState(now.dayOfWeek().name().toLowerCase())\n  const airshifts = allAirshifts\n    .filter(([show, airshift]) => airshift.day.toLowerCase() === day.toLowerCase())\n    .sort((x, y) => sortByStart(x[1], y[1]))\n\n  return (\n    <Stack gap={1}>\n      <Dropdown\n        value={day}\n        onChange={setDay}\n        options={[\n          ...days,\n          {value: 'grid', label: 'All'},\n        ]}\n      />\n      {day === 'grid' ? (\n        <Everything airshifts={allAirshifts} />\n      ) : (\n        <Day day={day} airshifts={airshifts} />\n      )}\n    </Stack>\n  )\n}\n\nexport default ({ data }) => {\n  const shows = data.allMarkdownRemark.edges.map((edge) => edge.node).map(Show.factory)\n\n  const now = useNow()\n  const [ current, next ] = zeitgeist(shows, now)\n\n  return (\n    <Layout title=\"Schedule\">\n      <Stack>\n        {current && (<>\n          <div><h2>Now</h2></div>\n          <div><Currently current={current} next={next} /></div>\n        </>)}\n        <div>\n          <h2>Schedule</h2>\n        </div>\n        <div>\n          <DailySchedule shows={shows}  />\n        </div>\n      </Stack>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  {\n    allMarkdownRemark(filter: {fields: {kind: {eq: \"shows\"}}}) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            banner_image\n            airshifts {\n              start\n              duration\n              day\n            }\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\n\nimport { css } from '@emotion/core'\n\nimport { lightGrey } from '@/components/colors'\n\nimport Time from '@/components/time'\n\n\nexport const Range = ({ start, end }) => {\n  return <span><Time value={start} />{' - '}<Time value={end} /></span>\n}\n\nexport const Shift = ({ value }) => {\n  return <span>{value.day}s <Range start={value.start} end={value.end} /></span>\n}\n\nexport const ShowImageSquare = ({ show }) => {\n  const { bannerImageUrl } = show\n\n  return <div\n    css={css`\n      overflow: hidden;\n      border: 1px solid ${lightGrey};\n      border-radius: 0.25em;\n      width: 100%;\n    `}\n  >\n    {\n      bannerImageUrl ? (\n        <div\n        css={css`\n          padding-bottom: 100%;\n          width: 100%;\n          background-image: url(\"${bannerImageUrl}\");\n          background-repeat: no-repeat;\n          background-position: center center;\n          background-size: cover;\n        `}\n        />\n      ) : (\n        <div\n        css={css`\n          padding-bottom: 100%;\n          width: 100%;\n          position: relative;\n        `}\n        >\n          <div css={css`\n            position: absolute;\n            width: 120%;\n            height: 120%;\n            top: -10%;\n            left: -10%;\n            background-image: url(\"/images/logo-disk.png\");\n            background-size: 40%;\n            transform: rotate(15deg);\n            background-position: center center;\n            opacity: 0.5;\n          `}/>\n        </div>\n      )\n    }\n  </div>\n}\n\nexport const ShiftSummary = ({ airshifts }) => {\n  if (airshifts.length === 1) {\n    return <Shift value={airshifts[0]} />\n  }\n\n  const first = airshifts[0]\n  const sameTime = airshifts.reduce((accumulation, item) => {\n    return accumulation && item.start === first.start && item.end === first.end\n  }, true)\n  if (sameTime) {\n    const days = airshifts.map((airshift) => airshift.day).map((day) => {\n      return {\n        'Sunday': 0,\n        'Monday': 1,\n        'Tuesday': 2,\n        'Wednesday': 3,\n        'Thursday': 4,\n        'Friday': 5,\n        'Saturday': 6,\n      }[day]\n    }).sort().map((ordinal) => {\n      return {\n        0: 'Sunday',\n        1: 'Monday',\n        2: 'Tuesday',\n        3: 'Wednesday',\n        4: 'Thursday',\n        5: 'Friday',\n        6: 'Saturday',\n      }[ordinal]\n    })\n    let range = `${days[0]} - ${days[days.length - 1]}`\n    if (range === 'Monday - Friday') {\n      range = 'Weekdays'\n    }\n    return <span>{range} <Range start={first.start} end={first.end} /></span>\n  }\n\n  return (\n    <span>\n      {airshifts.map((airshift, index) => {\n        return (\n          <React.Fragment key={index}>\n            {index > 0 && ', '}\n            <Shift value={airshift} />\n          </React.Fragment>\n        )\n      })}\n    </span>\n  )\n}\n"],"sourceRoot":""}